"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomChars = void 0;
const keyboards_js_1 = require("../data/keyboards.js");
const ensure_locale_js_1 = require("./ensure-locale.js");
const is_special_char_js_1 = require("./is-special-char.js");
const random_int_js_1 = require("./random-int.js");
class RandomChars {
    getRandomCharCloseToChar(intendedChar, locale) {
        (0, ensure_locale_js_1.ensureLocale)(locale);
        const keyboard = keyboards_js_1.keyboards[locale];
        let isLowerKey = true;
        // Try to find the intended char in the lower case keyboard
        let rowIndex = keyboard.lower.findIndex(row => row.includes(intendedChar));
        if (rowIndex === -1) {
            // If not found, try to find it in the upper case keyboard
            isLowerKey = false;
            rowIndex = keyboard.upper.findIndex(row => row.includes(intendedChar));
        }
        if (rowIndex === -1) {
            // If not found, return undefined
            return undefined;
        }
        const usedKeyboard = isLowerKey ? keyboard.lower : keyboard.upper;
        const columnIndex = usedKeyboard[rowIndex].indexOf(intendedChar);
        const nearbyChars = this.findNearbyChars(intendedChar, rowIndex, columnIndex, usedKeyboard);
        return nearbyChars[(0, random_int_js_1.randomInt)(0, nearbyChars.length - 1)]; // if list is empty, returns undefined
    }
    findNearbyChars(intendedChar, rowIndex, columnIndex, usedKeyboard) {
        const threshold = Math.random() < 0.5 ? 2 : 1;
        const nearbyChars = [];
        for (let r = -1; r <= 1; r++) {
            for (let c = -2; c <= 2; c++) {
                const row = rowIndex + r;
                const column = columnIndex + c;
                if ((r === 0 && c === 0) || Math.abs(r) + Math.abs(c) > threshold) {
                    // skip same char and too far away
                    continue;
                }
                if (row === 0 && rowIndex !== 0) {
                    // We do not want to accidentally switch to the number row, because that is unlikely I think
                    continue;
                }
                if (row < 0 || row >= usedKeyboard.length || column < 0 || column >= usedKeyboard[row].length) {
                    // skip out of bounds
                    continue;
                }
                const potentialChar = usedKeyboard[row][column];
                if ((0, is_special_char_js_1.isSpecialChar)(potentialChar) !== (0, is_special_char_js_1.isSpecialChar)(intendedChar)) {
                    // skip if the char is a special char and the intended char is not or vice versa
                    continue;
                }
                nearbyChars.push(potentialChar);
            }
        }
        return nearbyChars;
    }
}
exports.RandomChars = RandomChars;
//# sourceMappingURL=random-char.js.map